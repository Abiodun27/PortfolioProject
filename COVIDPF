CREATE TABLE coviddeaths(iso_code VARCHAR(50),	continent VARCHAR(50),location VARCHAR(50), date DATE,
population BIGINT,	total_cases INT, new_cases INT, new_cases_smoothed DECIMAL,	total_deaths INT, new_deaths INT, 
new_deaths_smoothed DECIMAL, total_cases_per_million DECIMAL, new_cases_per_million DECIMAL,	
new_cases_smoothed_per_million DECIMAL,	total_deaths_per_million DECIMAL, new_deaths_per_million DECIMAL, 
new_deaths_smoothed_per_million DECIMAL,reproduction_rate DECIMAL, icu_patients INT, icu_patients_per_million DECIMAL,
hosp_patients INT, hosp_patients_per_million DECIMAL, weekly_icu_admissions INT, weekly_icu_admissions_per_million DECIMAL,	
weekly_hosp_admissions INT,	weekly_hosp_admissions_per_million DECIMAL
);

SELECT * 
FROM coviddeaths
ORDER BY 3,4;


CREATE TABLE covidvaccinations(iso_code VARCHAR(50), continent VARCHAR(50), location VARCHAR(50), date DATE,
total_tests BIGINT, new_tests BIGINT, total_tests_per_thousand DECIMAL, new_tests_per_thousand DECIMAL, new_tests_smoothed BIGINT,	
new_tests_smoothed_per_thousand	DECIMAL, positive_rate DECIMAL,	tests_per_case DECIMAL,	tests_units VARCHAR(50), 
total_vaccinations BIGINT, people_vaccinated BIGINT, people_fully_vaccinated BIGINT, total_boosters BIGINT, new_vaccinations BIGINT,	
new_vaccinations_smoothed BIGINT, total_vaccinations_per_hundred DECIMAL, people_vaccinated_per_hundred DECIMAL,	
people_fully_vaccinated_per_hundred DECIMAL, total_boosters_per_hundred DECIMAL, new_vaccinations_smoothed_per_million INT,
new_people_vaccinated_smoothed INT,	new_people_vaccinated_smoothed_per_hundred DECIMAL,	stringency_index DECIMAL,	
population_density DECIMAL,	median_age DECIMAL,	aged_65_older DECIMAL, aged_70_older DECIMAL, gdp_per_capita DECIMAL,
extreme_poverty DECIMAL, cardiovasc_death_rate DECIMAL,	
diabetes_prevalence DECIMAL, female_smokers DECIMAL, male_smokers DECIMAL, handwashing_facilities DECIMAL, 
 hospital_beds_per_thousand DECIMAL,life_expectancy DECIMAL,
human_development_index DECIMAL, excess_mortality_cumulative_absolute DECIMAL, excess_mortality_cumulative DECIMAL,	
excess_mortality DECIMAL, excess_mortality_cumulative_per_million DECIMAL
);


SELECT * 
FROM covidvaccinations
ORDER BY 3,4;

SELECT iso_code, location, total_cases, total_deaths, population
FROM coviddeaths
WHERE location = 'Upper middle income'
ORDER BY 1,2;

--Looking Total cases VS Total deaths
SELECT location, total_cases, total_deaths, (CAST(total_deaths AS FLOAT)/total_cases)*100 AS DeathPercent
FROM coviddeaths
WHERE location LIKE '%States%'
ORDER BY 1,2;

--Looking Total cases VS Population
--Trying investigate percentage of the population infected
SELECT location, date, population, total_cases, (CAST(total_cases AS FLOAT)/population)*100 AS PercentInfected
FROM coviddeaths
WHERE location LIKE '%North Korea%'
ORDER BY 1,2 DESC;

--Looking at countries with highest infection rate compared to population
SELECT location, population, MAX(total_cases) AS maximum_infected_cases ,
MAX((CAST(total_cases AS FLOAT)/population))*100 AS PercentInfected
FROM coviddeaths
--WHERE location LIKE 'Nigeria'
GROUP BY location, population
ORDER BY PercentInfected DESC;

--Showing countries with highest death count per population
SELECT location, MAX(CAST(total_deaths AS INT)) AS total_death_counts
FROM coviddeaths 
WHERE continent IS NOT NULL AND total_deaths IS NOT NULL
GROUP BY location
--HAVING location = 'Nigeria'
ORDER BY total_death_counts DESC;

--Showing continent  with highest death count per population
SELECT continent, MAX(total_deaths) AS total_death_counts
FROM coviddeaths 
WHERE continent IS NOT NULL 
GROUP BY continent
--HAVING continent = 'Africa'
ORDER BY total_death_counts DESC;

--GLOBAL NUMBERS
SELECT date, SUM(new_cases) AS total_new_cases, SUM(new_deaths) AS total_deaths, 
(SUM(CAST(new_deaths AS FLOAT))/SUM(new_cases))*100 AS PercentDeath
FROM coviddeaths
WHERE continent IS NOT NULL
GROUP BY date
ORDER BY 1,2;


-- Looking at total population vs vaccinations
SELECT cd.continent, cd.location, cd.date, cd.population, cv.new_vaccinations,
SUM(cv.new_vaccinations) OVER(PARTITION BY cd.location ORDER BY cd.location, cd.date) AS total_new_vc
--( total_new_vc/populatio)*100
FROM coviddeaths AS cd
JOIN covidvaccinations AS cv
	ON cd.location = cv.location
	AND cd.date = cv.date
WHERE cd.continent IS NOT NULL
ORDER BY 2,3;



--USING A CTE
WITH 
popvsvacc (continent, location, date, population, new_vaccinations, total_new_vc) 
AS
	(SELECT cd.continent, cd.location, cd.date, cd.population, cv.new_vaccinations,
	SUM(cv.new_vaccinations) OVER(PARTITION BY cd.location ORDER BY cd.location, cd.date) AS total_new_vc
	FROM coviddeaths AS cd
	JOIN covidvaccinations AS cv
		ON cd.location = cv.location
		AND cd.date = cv.date
	WHERE cd.continent IS NOT NULL)
SELECT *, 
(total_new_vc/population)*100 AS percentvaccination
FROM popvsvacc;


-- TEMP TABLE
DROP TABLE IF EXISTS PercentPopulationVaccinated;
CREATE  TEMP TABLE PercentPopulationVaccinated(
Continent VARCHAR(255), 
Location VARCHAR(255),
Date DATE,
Population DECIMAL, 
New_vaccinations DECIMAL, 
total_new_vc DECIMAL
)

INSERT INTO PercentPopulationVaccinated
SELECT cd.continent, cd.location, cd.date, cd.population, cv.new_vaccinations,
SUM(cv.new_vaccinations) OVER(PARTITION BY cd.location ORDER BY cd.location, cd.date) AS total_new_vc
--( total_new_vc/populatio)*100
FROM coviddeaths AS cd
JOIN covidvaccinations AS cv
	ON cd.location = cv.location
	AND cd.date = cv.date
--WHERE cd.continent IS NOT NULL
	
SELECT *, (total_new_vc/population)*100 AS percentvaccination
FROM PercentPopulationVaccinated;


-- Creating View to store data for later visualizations
CREATE VIEW PercentPopulationVaccinated AS
SELECT cd.continent, cd.location, cd.date, cd.population, cv.new_vaccinations,
SUM(cv.new_vaccinations) OVER(PARTITION BY cd.location ORDER BY cd.location, cd.date) AS total_new_vc
--( total_new_vc/populatio)*100
FROM coviddeaths AS cd
JOIN covidvaccinations AS cv
	ON cd.location = cv.location
	AND cd.date = cv.date
WHERE cd.continent IS NOT NULL
--ORDER BY 2,3

